

#debug: true
server:
  port: 10000
  tomcat:
    uri-encoding: UTF-8
  http2:
    enabled: true

spring:
  aop:
    proxy-target-class: true
    encoding:
      force: true
      charset: UTF-8
      enabled: true
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
      routes:
      - id: auth
        uri: lb://authserver
        predicates:
        - Path= ${server.servlet.context-path}/uaa/**
        filters:
        - StripPrefix= 1
zuul:
  host:
    maxPerRouteConnections: 300
  sensitive-headers: '' #Distribute headers cookies to children
  add-proxy-headers: true
  add-host-header: true
  routes:
    authserver:
      path: /uaa/**
      stripPrefix: false
      #      url: http://${AUTH-SERVER_SERVICE_HOST}:${AUTH-SERVER_SERVICE_PORT}/uaa
      serviceId: auth-server

logging:
  path: /com.twinkle.cloud.common.asm.def.var/log/micro/baseplatform/
  level:
    org.springframework: warn
    org.springframework.security: error

eureka:
  client:
    serviceUrl:
      defaultZone: http://${DISCOVERY_SERVICE_HOST}:${DISCOVERY_SERVICE_PORT}/eureka/
  instance:
    preferIpAddress: true

ribbon:
  ConnectTimeout: 600000
  ReadTimeout: 600000
  eureka:
    enabled: true
    ReadTimeout: 600000
    MaxAutoRetries: 1

hystrix:
  command:
    frontend:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 600000
    admin:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 600000
    marketplace:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 600000
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 600000

proxy:
  auth:
    routes:
      basis: oauth2

security:
#  sessions: NEVER #"security.sessions" setting means that Spring Security will accept cookies as authentication tokens but won't create them unless they already exist.
  oauth2:
    client:
      client-id: saas-service
      client-secret: secret
      userAuthorizationUri: http://${AUTHSERVER_SERVICE_HOST}:${AUTHSERVER_SERVICE_PORT}/uaa/oauth/authorize
      access-token-uri: http://${AUTHSERVER_SERVICE_HOST}:${AUTHSERVER_SERVICE_PORT}/uaa/oauth/token
      grant-type: client_credentials
    resource:
      token-info-uri: http://${AUTHSERVER_SERVICE_HOST}:${AUTHSERVER_SERVICE_PORT}/uaa/user
    authorization:
      check-token-access: http://${AUTHSERVER_SERVICE_HOST}:${AUTHSERVER_SERVICE_PORT}/uaa/oauth/check_token

---
spring:
  profiles: dev
  redis:
    lettuce:
      pool:
        max-wait: